! /usr/bin/env zsh

### Variables ###
# Note: These variables are menat to by easily changed by anyone.
export shadow_toggle="off"        # Determines wether window shadows are on                         (usage: on/off)
export mouse_mod="ctrl"            # key that when pressed, mouse can be used to move and resize     (usage: cmd/alt/ctrl/shift)1
export border_toggle="on"         # Determines wether borders for active windows are on             (usage: on/off)
export border_width="2"           # Determines the width of the active window's border              (usage: 2/5/any number)
export border_radius="11"         # radius of the active window's border                            (usage: 11/0/any number)
export opacity_toggle="on"       # Detriments wether opacity based focus is on                     (usage: on/off)
export layout="bsp"               # Layout of windows                                               (usage: bsp/float/stack)
export animation_duration="0.2"   # Window animation duration                                       (usage: 0.0/0.3/0.5)
export autoraise_toggle="on"      # turn autoraise on or off                                        (usage: on/off)

### Load scriptting adittion ##
sudo yabai --load-sa
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"  # If yabai detected that i loaded the scripting addition, restart yabai

### Focus the window that is hoverd with the mouse ###
if [[ $autoraise_toggle == "on" ]]; then
   yabai -m config focus_follows_mouse autoraise
   # yabai -m config mouse_follows_focus on
fi

### Toggles ###
yabai -m config window_shadow $shadow_toggle                     # turn on/off window shadows (configured in variables)
yabai -m config mouse_modifier $mouse_mod                        # make cmd the mouse modifier key (configued in variables)
yabai -m config layout $layout                                   # set layout (configured in variables)
yabai -m config window_animation_duration $animation_duration    # Set animation duration (configured in variables)
yabai -m config window_border_radius $border_radius              # set border radius (configured in variables)

### Configure opacity based focus ###
yabai -m config window_opacity             $opacity_toggle      # Turn on/off opacity based focus (configured in variables)
yabai -m config window_opacity_duration    0.2                  # Time it takes to fade between windows
yabai -m config active_window_opacity      1.0                  # opacity for the focused window
yabai -m config normal_window_opacity      0.9                  # opacity for other windows

### Configure mouse usage ###
yabai -m config mouse_action1         warp
yabai -m config mouse_action2         resize

### Configure window borders ###
yabai -m config window_border $border_toggle            # Turn on/off window borders (configured in variables)
yabai -m config window_border_width $border_width       # Set border width (configured in variables)
yabai -m config active_window_border_color 0xFFcba6f7   # Set border color for the active window
yabai -m config normal_window_border_color 0xFF3e4050   # set border color for other windows

### Configure window gaps ###
yabai -m config top_padding                3   # Top gap width (configured in variables)
yabai -m config bottom_padding             5   # Bottom gap width (configured in variables)
yabai -m config left_padding               5   # left gap width (configured in variables)
yabai -m config right_padding              5   # right gap width (configured in variables)
yabai -m config window_gap                 8   # inside gap width (configured in variables)


# Center unmanaged windows

# Managed apps can't be moved
yabai -m rule --add label="Finder" app="^Finder$" title="(Co(py|nnect)|Move|Info|Pref)" manage=off
yabai -m rule --add label="Safari" app="^Safari$" title="^(General|(Tab|Password|Website|Extension)s|AutoFill|Se(arch|curity)|Privacy|Advanced)$" manage=off
yabai -m rule --add label="System Preferences" app="^System Preferences$" title=".*" manage=off
yabai -m rule --add label="Software Update" title="Software Update" manage=off
yabai -m rule --add label="About This Mac" app="System Information" title="About This Mac" manage=off
yabai -m rule --add label="Archive Utility" app="Archive Utility" title="Archive Utility" manage=off
yabai -m rule --add app="Steam" manage=off

events=('application_launched')
# apps=('System Preferences' 'Archive Utility')
apps=('Archive Utility') 

read -r -d '' action <<- 'EOF'
  echo "action"
  window="$(yabai -m query --windows --window)"
  display="$(yabai -m query --displays --window)"
  coords="$(jq \
    --argjson window "${window}" \
    --argjson display "${display}" \
    -nr '(($display.frame | .x + .w / 2) - ($window.frame.w / 2) | tostring)
      + ":"
      + (($display.frame | .y + .h / 2) - ($window.frame.h / 2) | tostring)')"
  yabai -m window --move "abs:${coords}"
EOF

(( ${#apps[@]} ))   && app_query="app=\"^($(IFS=\|;echo "${apps[*]}"))\$\""
for event in "${events[@]}"; do
  yabai -m signal --add label="${0}_signal_${event}" event="${event}" \
    $(eval "${app_query}}") action="${action}"
done

### Notify when the yabai config finished loading ###
echo "yabai configuration loaded.."
